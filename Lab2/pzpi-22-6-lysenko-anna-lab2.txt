МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи №2
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду серверної частини програмної системи»


Виконала                            Перевірив
ст. гр. ПЗПІ-22-6                   ст. викладач кафедри ПІ
Лисенко Анна Миколаївна             Сокорчук Ігор Петрович



Харків 2025
     
1 ІСТОРІЯ ЗМІН
№   Дата            Версія звіту        Опис змін та виправлень
1   10.05.2025      0.1                 Створено розділи «Історія змін», «Завдання».
2   11.05.2025      0.2                 Заповнено розділи «Опис виконаної роботи», «Висновки».
3   11.05.2025      0.3                 У додаток Б додано побудовані UML та ER діаграми.
4   12.05.2025      0.4                 У додатку В представлено приклади коду.
5   13.05.2025      0.5                 Додано у додаток А посилання на відео, описано його хронологію. 
     
2 ЗАВДАННЯ
1. Розробити серверну (back-end) частину програмної системи.
2. Побудувати ER-модель даних, структуру бази даних. 
3. Створити UML-діаграму прецедентів (Use Case Diagram).
4. Побудувати UML-діаграму розгортання (Deployment Diagram).
5. Створити UML-діаграму взаємодії (Interaction Overview Diagram).
     
3 ОПИС ВИКОНАНОЇ РОБОТИ
1. Оновлено проєкт, побудований за клієнт-серверною архітектурою. Серверна частина платформи для виявлення витоків газу була реалізована на ASP.NET Core. Для зберігання даних використовується реляційна база даних MS SQL. Робота з базою даних MS SQL Server відбувається через ORM, а саме Entity Framework Core. Взаємодія з клієнтами здійснюється через API, для інтеграції з IoT-сенсорами, вебінтерфейс, мобільний додаток.
2. Для серверної частини системи було побудовано UML-діаграму прецедентів. Також було створено UML-діаграму розгортання та UML-діаграму взаємодії. Рисунки наведено у додатку Б.
3. Створено ER-діаграму даних, що винесена у додаток Б (див. рис. Б.1)
4. Розроблено та описано базу даних (БД) програмної системи. У проєкті використовується Entity Framework для роботи з базою даних.
З'єднання з базою даних налаштовано в файлі appsettings.json і передається через DbContext в Program.cs.
    Таблиця Users призначена для зберігання інформації про користувачів, їх ролі та пов'язані дані. Її поля та обмеження полів:
• user_id (INT, первинний ключ, іdentity): унікальний ідентифікатор для кожного користувача, інкрементується автоматично.
• user_name (NVARCHAR(50), NOT NULL): ім'я користувача.
• role (NVARCHAR(30), NOT NULL): роль користувача (наприклад, мешканець, завідувач, адміністратор).
• password (NVARCHAR(255), NOT NULL): пароль користувача.
• email (NVARCHAR(100), NOT NULL): електронна адреса користувача.
• phone_number (NVARCHAR(15), NULL): номер телефону користувача.
• location_id (INT, NULL, зовнішній ключ): посилається на поле location_id у таблиці Location, що зв’язує користувача з певною локацією.
    Таблиця Locations призначена для зберігання інформації про локації. Її поля та обмеження полів:
• location_id (INT, первинний ключ, Identity): унікальний ідентифікатор локації, інкрементується автоматично.
• name (NVARCHAR(50), NOT NULL): назва локації.
• location_type (NVARCHAR(30), NOT NULL): тип локації.
• floor (INT, NULL): поверх, на якому знаходиться локація.
• area (DECIMAL(10, 2), NULL): площа локації у квадратних метрах.
    Таблиця Sensors призначена для зберігання інформації про сенсори, встановлені у локаціях. Її поля та обмеження полів:
• sensor_id (INT, первинний ключ, іdentity): унікальний ідентифікатор сенсора, автоматично інкрементується.
• type (NVARCHAR(50), NOT NULL): тип сенсора.
• status (NVARCHAR(30), NOT NULL): статус сенсора.
• installation_date (DATE, NULL): дата встановлення сенсора.
• location_id (INT, зовнішній ключ): посилається на поле location_id у таблиці Location, що асоціює сенсор із локацією.
    Таблиця SensorData зберігає дані, отримані від сенсорів. Її поля та обмеження полів:
• data_id (INT, первинний ключ, іdentity): унікальний ідентифікатор запису даних автоматично інкрементується.
• gas_level (FLOAT, NOT NULL): рівень газу, зафіксований сенсором.
• temperature (FLOAT, NOT NULL): температура, зафіксована сенсором.
• pressure (FLOAT, NOT NULL): тиск, зафіксований сенсором.
• time_stamp (DATETIME, NOT NULL): час, коли були зафіксовані дані.
• sensor_id (INT, зовнішній ключ): ідентифікатор сенсора, що зібрав дані.
    Таблиця SensorChecks використовується для зберігання інформації про перевірки датчиків. Її поля та обмеження полів:
• check_id (INT, первинний ключ, іdentity): унікальний ідентифікатор перевірки. Генерується автоматично завдяки властивості IDENTITY.
• check_date (DATE, NOT NULL): дата проведення перевірки.
• result (NVARCHAR(50), NOT NULL): результат перевірки. 
• sensor_id (INT, зовнішній ключ): ідентифікатор датчика, до якого належить перевірка.
    Таблиця Events зберігає дані про події, що викликають сенсори. Її поля та обмеження полів: 
• event_id (INT, PRIMARY KEY, IDENTITY): унікальний ідентифікатор події, автоматично генерується.
• event_time (DATETIME, NOT NULL): зберігається час і дата події.
• severity (INT, NOT NULL): описує важливість, рівень серйозності події.
• data_id (INT, FOREIGN KEY): ідентифікатор даних, що викликали подію.
    Таблиця Notifications зберігає інформацію про сповіщення. Її поля та обмеження полів: 
• notification_id (INT, PRIMARY KEY, IDENTITY): унікальний ідентифікатор сповіщення.
• message (NVARCHAR(255), NOT NULL): містить текст сповіщення.
• notification_type (NVARCHAR(30), NOT NULL): тип сповіщення.
• formation_time (DATETIME, NOT NULL): зберігає дату і час створення сповіщення.
• user_id (INT, FOREIGN KEY): ідентифікатор користувача, що отримав сповіщення.
• event_id (INT, FOREIGN KEY): ідентифікатор події, на яку посилається сповіщення.
Створена діаграма структури БД наведена у додатку Б (див. рис. Б.2).
5. При розробці серверної частини було реалізовано REST API за допомогою ASP.NET Core, де контролери відповідають за обробку HTTP-запитів. Реалізовано основні операції отримання, додавання, оновлення та видалення даних для усіх таблиць бази даних. Також додано додаткові функції для взаємодії з даними, реалізовано методи та функції, що відповідають за бізнес-логіку. 
У таблиці 1 представлено специфікацію розробленого АРІ.
Таблиця 1 – Специфікація АРІ
Метод       Маршрут                                       Опис
GET     api/users                               Отримати список всіх користувачів.
GET     api/users/{id}                          Отримати певного користувача.
POST    api/users                               Створити нового користувача.
PUT     api/users/{id}                          Оновити обраного користувача.
DELETE  api/users/{id}                          Видалити обраного користувача.
GET     api/users/location/{locationId}         Отримати користувачів за обраною локацією.
GET     api/locations                           Отримати всі локації.
GET     api/locations/{id}                      Знайти локацію за id.
POST    api/locations                           Створити нову локацію.
PUT     api/locations/{id}                      Оновити обрану локацію.
DELETE  api/locations/{id}                      Видалити обрану локацію.
GET     api/locations/floor/{floor}             Отримати локації за обраним поверхом.
GET     api/locations/type/{type}               Отримати локації за обраним типом.
GET     api/location/calculate_sensors/{locationId}Обчислення кількості сенсорів для конкретної локації.
GET     api/sensors                             Отримати всі сенсори.
GET     api/sensors/{id}                        Отримати певний сенсор.
POST    api/sensors                             Додати новий сенсор.
PUT     api/sensors/{id}                        Оновити обраний сенсор.
DELETE  api/sensors/{id}                        Видалити обраний сенсор.
GET     api/sensors/status/{status}             Отримати сенсори з обраним статусом.
GET     api/sensors/location/{locationId}       Отримати сенсори на вказаній локації.
GET     api/sensors/outdated_check/{sensorId}   Перевірка потреби оновлень сенсорів.
GET     api/checks                              Отримати всі перевірки.
GET     api/checks/{id}                         Отримати певну перевірку.
POST    api/checks                              Додати нову перевірку.
PUT     api/checks/{id}                         Оновити інформацію про перевірку.
DELETE  api/checks/{id}                         Видалити інформацію про перевірку.
GET     api/checks/date/{date}                  Отримати всі перевірки за обраною датою.
GET     api/checks/result/{result}              Отримати всі перевірки з обраним результатом.
GET     api/checks/sensor/{sensorId}            Отримати всі перевірки для обраного сенсора.
GET     api/data                                Отримати всі дані з сенсорів.
GET     api/data/{id}                           Отримати певні дані.
POST    api/data                                Створити нові дані.
PUT     api/data/{id}                           Оновити дані з сенсора.
DELETE  api/data/{id}                           Видалити дані, отримані з сенсора.
GET     api/events                              Отримати всі події.
GET     api/events/{id}                         Отримати певну подію.
POST    api/events                              Створити нову подію.
PUT     api/events/{id}                         Оновити обрану подію.
DELETE  api/events/{id}                         Видалити обрану подію.
GET     api/events/severity/{severity}          Отримати всі події з обраною важливістю.
GET     api/notifications                       Отримати всі сповіщення.
GET     api/notifications/{id}                  Отримати певне сповіщення.
POST    api/notifications                       Створити нове сповіщення.
PUT     api/notifications/{id}                  Оновити обране сповіщення.
DELETE  api/notifications/{id}                  Видалити обране сповіщення.
GET     api/notifications/type/{type}           Отримати всі сповіщення за вказаним типом.
POST    api/Backup/create                       Cтворити резервне копіювання баз даних.
     
4 ВИСНОВКИ
У результаті виконання лабораторної роботи було оновлено розроблену серверну частину програмної системи. Крім цього, було описано та побудовано ER-модель даних, структуру бази даних, UML-діаграму прецедентів, UML-діаграму розгортання та UML-діаграму взаємодії для серверної частини. Всі діаграми та схеми наведено у додатку Б. 

ДОДАТОК А
Посилання на відеозапис та текст хронологічного опису відео
     
Відеозапис доповіді на YouTube: https://youtu.be/slcIc7AP_5E 

Хронологічний опис відеозапису:
00:00 ‒ Вступ.
00:13 ‒ Тестування авторизації у системі.
00:34 ‒ Тестування запитів для взаємодії з користувачами.
01:11 ‒ Тестування запитів для взаємодії з локаціями.
02:02 ‒ Тестування запитів для взаємодії з повідомленнями.
02:30 ‒ Тестування запитів для взаємодії з подіями.
03:08 ‒ Тестування запитів для взаємодії з сенсорами.
04:01 ‒ Тестування запитів для взаємодії з перевірками сенсорів.
04:41 ‒ Тестування запитів для взаємодії з даними з сенсорів.
05:18 ‒ Тестування бізнес-логіки розрахунку строку використання датчику.
05:53 ‒ Тестування бізнес-логіки розрахунку кількості сенсорів у локації певної площі.
06:34 ‒ Тестування бізнес-логіки для відправки сповіщень щодо несправностей сенсорів.
07:28 ‒ Тестування бізнес-логіки для відправки сповіщень щодо виявлених аномалій.

ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 ‒ ER-діаграма даних

Рисунок Б.2 ‒ Структура бази даних

Рисунок Б.3 ‒ UML-діаграма прецедентів

Рисунок Б.4 ‒ UML-діаграма взаємодії для серверної частини

Рисунок Б.5 ‒ UML-діаграма розгортання

ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab2/pzpi-22-6-lysenko-anna-lab2/BusinessLogic/SensorEventEvaluator.cs

1  public double CalculateDangerLevel(double gasLevel, double temperature, double pressure)
2  {
3      double maxGasLevel = 50000;
4      double maxTemperature = 30;
5      double maxPressure = 10;
6
7      return (gasLevel / maxGasLevel) + (temperature / maxTemperature)
8           + (pressure / maxPressure);
9  }
10
11  public bool IsDangerous(double dangerLevel, out string severity)
12  {
13      if (dangerLevel > 10)
14      {
15          severity = dangerLevel > 2 ? "High" : "Medium";
16          return true;
17      }
18
19      severity = "Low";
20      return false;
21  }

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab2/pzpi-22-6-lysenko-anna-lab2/BusinessLogic/SensorCheckAlert.cs

1  public async Task HandleSensorCheckResultAsync(SensorCheck sensorCheck)
2  {
3      if (sensorCheck.result.ToLower() != "failed") return;
4      var managerEmail = await _context.Users
5          .Where(u => u.role == "Manager")
6          .Select(u => u.email)
7          .FirstOrDefaultAsync();
8  
9      var sensor = await _context.Sensors
10                     .Include(s => s.Location)
11                     .FirstOrDefaultAsync(s => s.sensor_id == sensorCheck.sensor_id);
12  
13      if (sensor == null || sensor.Location == null) return;
14  
15      var locationName = sensor.Location.name ?? "невідомо";
16      var locationFloor = sensor.Location.floor.ToString() ?? "невідомо";
17
18      var subject = "Сенсор не пройшов технічну перевірку";
19      var body = $"Сенсор з ID {sensorCheck.sensor_id} не пройшов технічну перевірку та потребує оновлення.\n" +
20                 $"Розташування сенсора:\n" +
21                 $"- Локація: {locationName}\n" +
22                 $"- Поверх: {locationFloor}";
23  
24      await _emailService.SendEmailAsync(managerEmail, subject, body);
25  }

В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab2/pzpi-22-6-lysenko-anna-lab2/Backup/BackupService.cs

1  public class BackupService
2  {
3      private readonly string _sqlServer = @"localhost";
4      private readonly string _database = "GasLeakDB";
5      private readonly string _username = "UserName";
6      private readonly string _password = "Password";
7  
8      public string BackupDatabase()
9      {
10          var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
11          var backupPath = $@"C:\DatabaseBackups\GasLeakDB_backup_{timestamp}.bak";
12  
13          var sql = $"BACKUP DATABASE [{_database}] TO DISK = N'{backupPath}' WITH NOFORMAT, INIT, " +
14                    $"NAME = N'{_database}-Full Database Backup', SKIP, NOREWIND, NOUNLOAD, STATS = 10;";
15  
16          var startInfo = new ProcessStartInfo
17          {
18              FileName = "sqlcmd",
19              Arguments = $"-S {_sqlServer} -U {_username} -P {_password} -Q \"{sql}\"",
20              RedirectStandardOutput = true,
21              RedirectStandardError = true,
22              UseShellExecute = false,
23              CreateNoWindow = true,
24          };
25  
26          using var process = new Process { StartInfo = startInfo };
27          process.Start();
28          var output = process.StandardOutput.ReadToEnd();
29          var error = process.StandardError.ReadToEnd();
30          process.WaitForExit();
31
32          if (process.ExitCode == 0)
33          {
34              return $"Backup successful. Saved to: {backupPath}";
35          }
36  
37          throw new Exception($"Backup failed. Error: {error}");
38      }
39  }
