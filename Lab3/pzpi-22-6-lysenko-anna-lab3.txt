МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду вебклієнта програмної системи»


Виконала                            Перевірив
ст. гр. ПЗПІ-22-6                   ст. викладач кафедри ПІ
Лисенко Анна Миколаївна             Сокорчук Ігор Петрович



Харків 2025

1 ІСТОРІЯ ЗМІН
№   Дата            Версія звіту        Опис змін та виправлень
1   29.05.2025      0.1                 Створено розділи «Історія змін», «Завдання».
2   31.05.2025      0.2                 У додаток Б додано побудовані діаграми.
3   06.06.2025      0.3                 Заповнено розділи «Опис виконаної роботи», «Висновки».
4   10.06.2025      0.4                 Додано у додаток А посилання на відео, описано його хронологію.
5   10.06.2025      0.5                 У додатку В представлено приклади коду.
     
2 ЗАВДАННЯ
1. Розробити клієнтську (front-end) частину програмної системи.
2. Створити UML-діаграму прецедентів (Use Case Diagram).
3. Побудувати UML-діаграму компонентів (Component Diagram).
4. Створити UML-діаграму діяльності (Activity Diagram).
5. Створити UML-діаграму пакетів (Package Diagram).
     
3 ОПИС ВИКОНАНОЇ РОБОТИ
1. Вебклієнт було розроблено із використанням HTML та CSS для створення дизайну та загальної структури інтерфейсу. JavaScript використовувався як основна мова для взаємодії з користувачем та для динамічного оновлення вмісту вебклієнта, а React, як бібліотека, дозволила ефективніше управляти станом додатку і створити компонентні інтерфейси.
2. Для клієнтської частини системи було побудовано UML-діаграму прецедентів. Також було створено UML-діаграму компонентів, UML-діаграму пакетів та UML-діаграму діяльності (взаємодія з сенсорами). 

4 ВИСНОВКИ
У результаті виконання лабораторної роботи було розроблено клієнтську частину програмної системи, забезпечено адміністрування системи. Крім цього, було описано та побудовано UML-діаграму прецедентів, UML-діаграму компонентів, UML-діаграму пакетів та UML-діаграму діяльності для клієнтської частини. Всі діаграми наведено у додатку Б. 

ДОДАТОК А
Посилання на відеозапис та текст хронологічного опису відео
     
Відеозапис доповіді на YouTube: https://youtu.be/skfznysCPys

Хронологічний опис відеозапису:
00:00 ‒ Вступ.
00:14 ‒ Тестування входу у систему.
00:43 ‒ Тестування інтерфейсу та користувацьких функцій для ролі «Мешканець».
01:15 ‒ Тестування інтерфейсу та користувацьких функцій для ролі «Менеджер».
03:57 ‒ Тестування інтерфейсу та користувацьких функцій для ролі «Адміністратор бізнес-логіки».
07:45 ‒ Перевірка взаємодії з IoT.
08:34 ‒ Тестування інтерфейсу та користувацьких функцій для ролі «Адміністратор системи».
11:28 ‒ Тестування інтерфейсу та користувацьких функцій для ролі «Адміністратор бази даних».
11:51 ‒  Перевірка створення резервної копії бази даних.
12:00 ‒  Завершення тестування.

ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 ‒ UML-діаграма прецедентів

Рисунок Б.2 ‒ UML-діаграма компонентів

Рисунок Б.3 ‒ UML-діаграма діяльності (взаємодія з сенсорами)

Рисунок Б.4 ‒ UML-діаграма пакетів

ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab3/pzpi-22-6-lysenko-anna-lab3/src/components/SensorCalculationBlock.js

1  import { useState } from 'react';
2  import { calculateRequiredSensors } from '../services/locationService';
3
4  function SensorCalculationBlock() {
5    const [locationId, setLocationId] = useState('');
6    const [minRequired, setMinRequired] = useState('');
7    const [result, setResult] = useState(null);
8    const [error, setError] = useState('');
9  
10    const calculate = async () => {
11      try {
12        const res = await calculateRequiredSensors(locationId, minRequired);
13        setResult(res.data.requiredSensors);
14        setError('');
15      } catch (e) {
16        setError(e.response?.data?.Message || 'Помилка обчислення.');
17        setResult(null);
18      }
19    };
20
21    return (
22      <div className="form-section">
23        <h2>Обчислення кількості сенсорів</h2>
24
25        {error && <div className="error">{error}</div>}
26        {result !== null && (
27          <p>Необхідна кількість сенсорів: <strong>{result}</strong></p>
28        )}
29
30        <div className="form-row">
31          <label>ID локації</label>
32          <input
33            type="number"
34            value={locationId}
35            onChange={(e) => setLocationId(e.target.value)}
36          />
37        </div>
38  
39        <div className="form-row">
40          <label>Мінімально необхідна кількість (необов'язково)</label>
41          <input
42            type="number"
43            value={minRequired}
44            onChange={(e) => setMinRequired(e.target.value)}
45          />
46        </div>
47  
48        <button className="btn-primary calculate-btn" onClick={calculate}>Обчислити</button>
49      </div>
50    );
51  }
52  
53  export default SensorCalculationBlock;

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab3/pzpi-22-6-lysenko-anna-lab3/src/components/SensorUpdateChecker.js

1  import { useState } from 'react';
2  import { checkSensorOutdated } from '../services/sensorService';
3
4  function SensorUpdateChecker({ sensorId }) {
5    const [lifetime, setLifetime] = useState('');
6    const [result, setResult] = useState('');
7
8    const handleCheck = async () => {
9      if (!lifetime) {
10        setResult('Введіть рекомендований термін експлуатації.');
11        return;
12      }
13
14      try {
15        const response = await checkSensorOutdated(sensorId, lifetime);
16        setResult(response.data);
17      } catch {
18        setResult('Не вдалося перевірити ресурс сенсора.');
19      }
20    };
21
22    return (
23      <div className="sensor-checker">
24        <input
25          type="number"
26          placeholder="Роки експлуатації"
27          value={lifetime}
28          onChange={(e) => setLifetime(e.target.value)}
29        />
30      <button className="btn-check" onClick={handleCheck}>Перевірити</button>
31        {result && <p className="check-result">{result}</p>}
32      </div>
33    );
34  }
35  
36  export default SensorUpdateChecker;

В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureLysenkoAnna/apz-pzpi-22-6-lysenko-anna/blob/main/Lab3/pzpi-22-6-lysenko-anna-lab3/src/pages/DbBackupPage.js

1  import '../styles/GlobalStyles.css';
2  import Header from '../components/Header';
3  import { createBackup } from '../services/backupService';
4
5  function DbBackupPage() {
6    const handleBackup = async () => {
7      try {
8        const res = await createBackup();
9        alert(`✅ Бекап створено: ${res.data.message}`);
10      } catch (err) {
11        alert(`❌ Помилка при створенні бекапу: ${err.response?.data?.error || err.message}`);
12      }
13    };
14  
15    return (
16      <div className="monitor-page">
17        <Header title="Панель адміністратора бази даних" role="DBAdmin" />
18        <h1>Резервне копіювання бази даних</h1>
19        <p>Натисніть кнопку нижче, щоб створити повну копію бази даних.</p>
20        <button className="btn-primary" onClick={handleBackup}>Створити бекап</button>
21      </div>
22    );
23  }
24
25  export default DbBackupPage;