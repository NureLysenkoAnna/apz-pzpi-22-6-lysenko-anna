МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»



ЗВІТ
з практичного заняття №1
з дисципліни «Архітектура програмного забезпечення»
на тему: «Патерни проєктування»


Виконала                            Перевірив
ст. гр. ПЗПІ-22-6                   ст. викладач кафедри ПІ
Лисенко Анна Миколаївна             Сокорчук Ігор Петрович



Харків 2025

1 ІСТОРІЯ ЗМІН
№       Дата        Версія звіту        Опис змін та виправлень
1   23.04.2025          0.1             Створено розділ «Завдання».
2   24.04.2025          0.2             Заповнено розділи «Опис виконаної роботи», «Висновки».
3   27.04.2025          0.3             Додано у додаток А посилання на відео, описано його хронологію. У додаток Б додано зображення слайдів та підписи. У додаток В винесено приклад коду.
     
2 ЗАВДАННЯ
1. Створити для виконання завдань з дисципліни GitHub репозиторій.
2. Створити та заповнити файл README.md.
3. Обрати патерн проєктування ПЗ із книг: Ґамма, “ООП. Патерни проєктування”, GoF для доповіді.
4. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ».
5. Створити та оформити слайди презентації доповіді.
6. Створити та опублікувати на YouTube відеозапис доповіді.
7. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub.
8. Завантажити у піддиректорію увесь програмний код, який розглядається у доповіді.
9. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
     
3 ОПИС ВИКОНАНОЇ РОБОТИ
1. Для виконання першого практичного заняття та більш детального вивчення було обрано «Адаптер» як шаблон (патерн) проєктування ПЗ.
2. Проведено ознайомлення з основними характеристиками патерну.
3. Вивчено структуру патерну «Адаптер» та розроблено схему, яка її відображає.
4. Проаналізовано проблеми, що вирішує патерн, умови його застосування.
5. Досліджено варіанти реалізації патерну «Адаптер».
6. Визначено переваги та недоліки обраного патерну.
7. Підготовано приклади коду, які демонструють, як можна застосовувати та реалізувати патерн на практиці. 
8. Створено презентацію, що містить детальний аналіз обраного патерну проєктування.
     
4 ВИСНОВКИ
Під час виконання практичної роботи були вивчені патерни проєктування програмного забезпечення. Для більш детального ознайомлення та аналізу було обрано патерн «Адаптер». На основі вивченого матеріалу було створено презентацію, що містить основну інформацію про патерн та кодові приклади (див. додаток В) його реалізації та застосування. Повні слайди презентації наведено у додатку Б.

ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/16J0EPZyx5A 
Хронологічний опис доповіді:
00:00 Тема доповіді.
00:11 Вступ.
00:58 Класифікація патернів.
02:06 Опис патерну «Адаптер».
02:53 Структура патерну «Адаптер».
04:54 Проблеми, що вирішує патерн.
07:28 Варіанти реалізації «Адаптера».
09:40 Переваги патерну.
10:21 Недоліки патерну.
10:49 Принципи застосування «Адаптера».
11:41 Приклад реалізації «Адаптера».
13:33 Висновки.
14:23 Список використаних джерел.


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Слайд з темою виступу

Рисунок Б.2 – Визначення патернів проєктування

Рисунок Б.3 – Класифікація патернів

Рисунок Б.4 – Патерн «Адаптер», його опис, принцип роботи

Рисунок Б.5 – Структура патерну

Рисунок Б.6 – Проблеми, що вирішує патерн
        
Рисунок Б.7 – Проблеми, що вирішує патерн (продовження)

Рисунок Б.9 – Основні переваги та недоліки патерну

Рисунок Б.10 – Застосування патерну при інтеграції стороннього класу з «чужим» інтерфейсом

Рисунок Б.11 – Застосування патерну при об’єднанні кількох підкласів без дублювання коду

Рисунок Б.12 – Приклад двох несумісних компонентів програми

Рисунок Б.13 – Приклад реалізації адаптеру

Рисунок Б.14 – Висновки

Рисунок Б.15 – Список використаних джерел

ДОДАТОК В
Приклади програмного коду

1  public interface Logger {
2      void logInfo(String message);
3      void logError(String message);
4  }
5  
6  public class ThirdPartyLogger {
7      public void writeToConsole(String severity, String text) {
8          System.out.println(severity + ": " + text);
9      }
10  }
11  
12  public class LoggerAdapter implements Logger {
13      private ThirdPartyLogger thirdPartyLogger;
14  
15      public LoggerAdapter(ThirdPartyLogger thirdPartyLogger) {
16          this.thirdPartyLogger = thirdPartyLogger;
17      }
18  
19      @Override
20      public void logInfo(String message) {
21          thirdPartyLogger.writeToConsole("INFO", message);
22      }
23  
24      @Override
25      public void logError(String message) {
26          thirdPartyLogger.writeToConsole("ERROR", message);
27      }
28  }
29  public class Application {
30      public static void main(String[] args) {
31          ThirdPartyLogger thirdPartyLogger =
32           new ThirdPartyLogger();
33  
34          Logger logger = new LoggerAdapter(thirdPartyLogger);
35  
36          logger.logInfo("Application started.");
37          logger.logError("An error occurred!");
38      }
39  }



